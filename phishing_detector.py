# -*- coding: utf-8 -*-
"""Phishing_detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HUmWxl83zdWgYrqjKYLNtEL_WsDlua2l
"""

# Install Kaggle API
!pip install kaggle

# Upload your kaggle.json API key (download it from your Kaggle account > Settings > API > Create New API Token)
from google.colab import files
files.upload()  # upload kaggle.json

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets list -s phishing

!kaggle datasets download -d shashwatwork/web-page-phishing-detection-dataset
!unzip web-page-phishing-detection-dataset.zip
yield

import pandas as pd

# Load dataset
data = pd.read_csv("dataset_phishing.csv")

print("Dataset Shape:", data.shape)
data.head()

# Check columns and data types
print(data.info())

# Check missing values
print(data.isnull().sum())

print(data.columns)

# Drop 'url' because it's just text (not useful directly as a feature here)
X = data.drop(["url", "status"], axis=1)

# Target column
y = data["status"]

print("Features shape:", X.shape)
print("Labels shape:", y.shape)

y = y.replace({-1: 0, 1: 1})

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Initialize model
model = RandomForestClassifier(n_estimators=200, random_state=42)

# Train
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluate
print("âœ… Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

import matplotlib.pyplot as plt
import numpy as np

# Get feature importance
importances = model.feature_importances_
indices = np.argsort(importances)[-15:]  # top 15 features

plt.figure(figsize=(8,6))
plt.barh(range(len(indices)), importances[indices], align="center")
plt.yticks(range(len(indices)), [X.columns[i] for i in indices])
plt.xlabel("Feature Importance")
plt.title("Top Features for Phishing Detection")
plt.show()

import joblib

joblib.dump(model, "phishing_detector.pkl")
print("Model saved as phishing_detector.pkl")